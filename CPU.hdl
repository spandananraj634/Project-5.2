// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
    DMux(in = true, sel = instruction[15], a = ATypeIns, b = CTypeIns);
    Or(a = ATypeIns, b = instruction[5], out = AInstruction);
    And(a = CTypeIns, b = instruction[4], out = CInstruction);

    Mux16(a = aluout, b = instruction, sel = ATypeIns, out = ToARegister);
    ARegister(in = ToARegister, load = AInstruction, out = ARegisterOut, out[0..14] = addressM);

    Mux16(a = ARegisterOut, b = inM, sel = instruction[12], out = inputsel);

    ALU(x = DRegisterOut, y = inputsel, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], 
    f = instruction[7], no = instruction[6], out = aluout, zr = IsZero, ng = IsNegative, out = outM);
    And(a = CTypeIns, b = instruction[3], out = writeM);

    DRegister(in = aluout, load = CInstruction, out = DRegisterOut);

    Or(a = IsZero, b = IsNegative, out = leqzero);		
    Not(in = leqzero, out = IsPositive);		

    And(a = instruction[0], b = IsPositive, out = JGT);	
    And(a = instruction[1], b = IsZero, out = JEQ);	
    And(a = instruction[2], b = IsNegative, out = JLT); 	
    Or(a = JEQ, b = JLT, out = JLE);	
    Or(a = JGT, b = JLE, out = JMP);

    And(a = JMP, b = CTypeIns, out = dojump);
    Not(in = dojump, out = nojump);
    PC(in = ARegisterOut, load = dojump, inc = nojump, reset = reset, out[0..14] = pc);
}